C/C++中程序内存区域划分：（操作系统划分的）
内核空间（代码不可读写）
栈（向下）  	 程序运行时（准备工作做好） 栈帧
内存映射（文件映射、动态库、匿名映射）
堆（向上）	在栈上开辟堆空间，栈上指向这里
数据段（全局数据、静态数据）
代码段（可执行代码（二进制指令代码）、只读常量）


代码->文件（一开始代码是存在文件里面的，即磁盘上）
编译链接 -- 可执行程序 文件（二进制指令代码、数据）  --运行  -- 创建子进程，加载入虚拟内存 
（注意，像什么类的公共代码区，在链接之后就不会有这些概念，均为二进制指令代码，存在于代码段）
注意char char2[] = "abcd";char2 是在栈上，*char2也是在栈上，此时是从常量区(代码段)"abcd"拷贝过来的数据。
但是const char* char3 = "abcd",此时char3是在栈上，*char3就在代码段（常量区）了。代码段受硬件保护，不允许被修改
--注意，只有堆上的内存是用户自己管，除此之外就不是用户管，是OS管理。


C语言中的动态内存管理方式：malloc calloc realloc free   -- 堆

C++中可以使用C语言，但是C++中也有新增的内存管理方式：
new、delete  -- 操作符  堆内存
int* p1 = (int*) malloc(sizeof(int));
int* p2 = new int;
int* p3 = new int[5];//申请5个int的数组
int* p4 = new int(5);//申请1个int对象，初始化为5
free(p1);
delete p2;
delete[] p3;
delete p4;
C++98不支持new数组初始化，C++11支持：int* p = new int[5]{1, 2, 3}; 1 2 3 0 0 
利用{}堆new数组进行初始化

结论：针对内置类型，new和delete和malloc、free没有本质的区别。只有用法的区别 -- 用法简化了。C++接口没有扩展的内容

主要是针对于自定义类型：1.堆上申请空间 2.调用函数初始化
c语言上只能开空间，C++使用new会调用其构造函数进行初始化。（如果没有传参，就必须要提供默认构造）
传参的话在()里面即可。

A* p = new A[10];  -- 调用10个默认构造delete[] p调用10个析构。
那么如果没有默认构造，此时就像之前那样, -- *  A* p = new A[10]{1,2,3,4,5,6,7,8,9,10} -- 必须要满 多参数就需要里面加{}

delete和free也会有不同，free释放空间，delete会先调用自定义类型的析构函数，然后在释放空间。
综上，结论：new和delete是为自定义类型准备的。不仅在堆上申请，还会调用构造初始化，析构清理。
注意一定要匹配使用。

malloc失败返回NULL指针，new失败的话是抛出异常：所以new失败是不会存在返回值的，内部会抛出异常：

异常：
try
{
	//检查异常方式
}
catch(const exception& e)
{
	cout << e.what() << endl;//打印错误
}
面向对象语言 -- 面对错误的方式

但是申请内存和电脑性能无关，-- 虚拟的内存4g，堆差不多2g，给我们的大概3g使用空间。



底层角度进行看待：
使用new 会调用 operator new函数      -- 帮助new在堆上开空间
底层代码实现最后还是会调用C语言的malloc，只不过加了处理异常机制，为了就是失败了抛异常。
	存在的意义：1.帮助new开空间，封装malloc，为了符合C++new的失败机制 -- 失败抛异常
之后就会调用构造函数
delete 调用operator delete函数
	封装free
之后调用析构函数

new Type 等价于 call operator new -> malloc -失败->抛异常     call Type构造函数
当然，上面所说的operator new、delete均可使用 -- 失败会抛异常

可以自己定义operator：
operator new 、 operator delete函数 用户没有显示写，就会调用库里面的。
比如检测哪个地方内存泄漏   本来传入O n需要几个参数的时候，使用define new 和 delete即可：
但是宏替换会很怪

也可以重载一个类专属的operator new
频繁申请内存   -- 内存池问题    申请很多很多个
--默认情况下new的时候，调用的是全局的operator new ，在类里重载一个，那么就会调此类专属的operator new 、 delete
在里面就可以写入一个内存池。
--可以写入，也可以调用库里的内存池。
//内存池
static allocator<ListNode>alloc;
void* operator new(size_t)
{
	void* obj = alloc.allocator(1);
	return obj;
}
void operator delete(void* ptr)
{
	alloc.deallocate((ListNode*)ptr, 1);	
}

static allocator<ListNode> 类名::alloc;//定义


但是，此处并不是函数重载或者是运算符重载。 -- 域不同
new ->operator new + 构造函数    默认情况下operator用的是全局库里的，但是如果类去实现自己专属的operator new，那么此时这个类对象就会调用自己实现的operator new


定位new
想对已经申请空间的自定义进行初始化
new(（指针）地址)自定义类型();或者直接是自定义类型    --- 显示的调用构造函数进行初始化
利用new操作符会调用构造函数的细节。
在哪有用呢？ -- 比如对内存池里面的空间进行初始化 -- 只是开了空间（了解）



C++如果需要扩容：直接开辟一个新的，然后把原来的数据拷贝进去   --目前   memcpy（地址1， 地址2， 字节数） 然后把旧空间释放调    然后指向新空间     相当于把realloc手动实现    开行空间     针对于自定义类型 定位new也不适合，如果前提是malloc的，后面无法匹配delete，无法调用析构。


区分 -- 面试


a、语法使用的区别
b、本质功能的区别

