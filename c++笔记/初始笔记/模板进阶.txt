1.非类型的模板参数：
	存在，给对应类型的数组赋予初识空间的个数。
	如果没有，需要我们指定给，但是每个空间大小都是一样了，能不能控制每个模板的大小不一样呢？
	比如 

	template<class T>
	class tmp
	T _a[N];
	tmp<int> a1;
	tmp<double> a2;

	上述就是类型模板参数
	实现上述要求--实现非类型模板参数 -- 常量
	template<class T, size_t N> // 传常量  
模板参数和函数参数非常像，自然也可以给缺省值
	但是这种只能用于整形，浮点数都不行。--语法规定

	库里面实现的有：（容器里面就会有）array<class T, size_t N> 固定大小的顺序容器。 -- 静态数组
		不支持push 、pop（直接随机访问即可）
	array<int, 10> a1;	// C++11
	int a2[10];	// C
	区别在于：（一般在原本C的数组里面，对于越界检查是抽查，读的时候还不会报错，写的时候才会 但是封装后，就会对越界有更好的检查）
	a1[10];
	a2[10];


2.模板的特化：
	有些场景下，针对某些类型进行特殊化处理。
	C++里比较类型可以使用接口，但是有些不靠谱或者不能直接进行比。（typeid()）
	比如传入对应类型的指针
	
	特化，如果和指定类型匹配就传入特化的模板函数
	template<>
	同名函数模板<指定类型>(参数)
	{
	}

	类模板同样如此，类模板也可以特化
	template<>
	class 类<指定类型> ()

	// priority_queue<Date> dq;
	// priority_queue<Date*> dq
	// 比如此时在里面传入大小的时候就会出错

new 和 malloc 不确定按照理论上的前后申请的地址按照顺序变化 --

	特化不能单独存在。

	全特化 template<>  class name<int, char>  		给定对应具体类型

	偏特化 template<class T1> class name<T1, int>		一个给对应模板 一个对应具体类型

	           template<class T1, class T2> class name<T1*, T2*>	类型 -- 只要两个是指针 -- >就会匹配

	           template<class T1, class T2> class name<T1&, T2&>  模板参数引用

	匹配的时候匹配最像的那个。
	特化体现的是：语法的类型匹配--最匹配的匹配，没有就将就一下，找最像的。	

3.模板的分离编译：
	模板不支持分离编译：
	一般 .h放声明 .cpp放定义。
	
	不再类中定义，在外定义（在同一文件）在用::指定位置的同时，需要在前面加上typename -- >(当我们想要指定一个还未实例化的类模板里面的内嵌类型，就要加这个) -- 声明这里是类型。（静态变量是类似的访问）--告诉编译器这里是类型
	如果分离文件，会报链接错误。
	
	比如vector 分离编译的话 push_back 和insert放在.cpp文件分离定义
	push_back()地址找不到
	
	vector v; call(地址)
	v.push_back(); call(?)

		构造函数 size函数 operatir[] 这些在vector.h中有定义，所以不需要链接 一开始的实例化时，这些成员函数也实例化了。直接有定义，编译阶段就确定地址了。
		push_back 、和insert 在.h中只有声明，没有定义。地址只有在链接阶段去找了。
		报错说明链接阶段找不到
	原本是要从符号表里去找，但是找不到。实际上分文件的话，在.h确定了类型，但是在另一边却无法确定类型，这样就无法实例化，就不会进符号表，那么就找不到了。
	
	如何解决？
	1.模板声明和定义不要分离。即使分离也就是出在类外。（源码就是这样的）
	2.显示实例化。  -- 不推荐
	template
	vector<int>  -- 显示实例化类 此时分开的文件也可以直接实例化了，这样就能找到对应的地址了。


	所以就算分离也就分离到一个文件里面。
	



模板优缺点：
	优点：模板复用了代码，节省资源，更快的迭代开发，STL库因此诞生。
	          增加了代码的灵活性	重复的动作交给编译器做

	缺陷：模板会导致代码膨胀问题，导致编译时间变长
	          出现模板编译错误时，错误信息非常凌乱，不易定位错误。
	
	

