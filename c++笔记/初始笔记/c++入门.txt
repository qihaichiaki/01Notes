1.基本兼容c语言语法
2.命名空间： 命名冲突（c语言解决的方式就是改名字，但是实际上会很麻烦）
	*关键字 namespace 名字{} (给编译器的一个找的规则)这个命名空间域内定义的变量名就可以和其他的名字区别开(就是同名情况)
	还能定义函数 以及类型
	也能进行嵌套 注意避免和库的名字一致
	一个项目里面多个文件的话 就定义同一个命名空间 编译器会将名字相同的命名空间合并在一起
	printf的话优先访问局部变量  局部优先(就近原则)
	但是如果想访问全局域的话，可以在变量名前加一个 : :
	* : : 域作用限定符  左边限定域的范围，空白就是全局域 一般是命名空间域的域名
	如果不需要指定的话 需要在前加入 using namespace 名字;  这样的话先去全局找，找不到才会去域里找 （这种不好 全部暴露出来，不好去找）
	
	std是c++标准库的命名空间 	iostream是std的库的头文件(io流)
	<<流插入  类似于控制台  和 Java pYthon中的+
	c++自动识别类型
	cout 类似于对象  输出相关
	cin 类似于 输入  std::cin>>i>>d; >>流提取
	endl == "\n"
	
	如果只展开常用的 useing 名字::对象名;
    使用命名空间的建议：1.项目中不要使用using namespace std;
		     2.日常练习用
		     3.项目中指定命名空间访问，或者展开常用的 using std::cout  using std::endl using std::cin(展开常用的)

3.输入输出：cout cin
	特点：自动识别类型   >>流提取（cin）  <<流插入（cout）
	在头文件 iostream里 std命名空间内

4.缺省参数
	在给函数的形参里比如void Func(int a = 0){}  这样在不传这个参数的时候，就有用了
	全缺省 即一个函数里所有形参均有赋给有初值
	半缺省 即部分参数缺省   缺省必须从右往左连续缺省
	赋值，均是遵循从左往右
    注意 如果声明和定义分离，声明和定义缺省参数不能同时出现->给声明里的缺省参数即可->以声明为准
	缺省一般只能是常数

5.函数重载：
	同一个作用域内，要求形参列表必须不同：形参类型 个数 顺序
	返回值不同，不构成重载
	实际上，用输入输出函数所谓的自动识别类型 本质就是函数重载 	
	
	函数重载的意义：用的地方很方便，就像用同一个一样





*为什么c++支持函数重载，而c语言不支持？ （Linux环境下）
   c++如何支持的呢？c调c++，c++调c？

1.
**编译，链接 func.h func.c main.c
预处理：头文件展开、宏替换、条件编译、去掉注释
func.i main.i
编译：语法检查，生成汇编代码
func.s main.s
汇编（指令级）：把汇编代码转化成二进制机器码（这样cpu就认识了）
func.o main.o(windows .obj)
链接：目标文件.o合并到一起，其次找一些只给声明函数变量地址。找不到就是链接错误。所以每个.o附带一个符号表，存放函数的地址。
Linux a.out 
windows xxx.exe
*
    c语言为什么不行？c语言利用的是函数名去找的，所以在符号表里就乱了。
    c++里加了函数修饰符，不是直接的函数名  前缀+函数的字符数+参数类型首字母，所以直接就可以找到
    c语言里面符号表里直接加的函数名，所以如果重载函数，函数名一致，就不知道要用哪个


2. c++程序      c++库
    c程序           c库
可以交叉调用。 但是需要进行一些处理。

c++程序 -》c库
.c生成静态库 可以在vs属性里设置  （链接的时候合并起的东西  == .o）
加库的时候#include""..表示上一层 ../  /即可 相对路径
但是只加头文件，在前面编译未编译，那么链接的时候找不到地址。所以需要在属性的连接器 添加库目录，把对应静态库的路径添加上即可。然后再输入里增加附加依赖项 增加静态库。即可使用。
但是 单是以上面的步骤进行找的话是行不通的。因为这里的程序是c++，库是c，c++以自己的方式找，链接时任然行不通。
c++调c++上述是可以的。
所以c++调c库的话，只需要在包含头文件的时候，加上一个域 extern"c"{#include""}即可。无;
	extern "c"包含的头文件的话  告诉c++的编译器，这里面的这些函数声明是c的库实现的，用c的规则去链接查找函数
	

c程序-》c++库
同理 .cpp生成静态库
然后加入c程序代码，#include利用相对路径，包含cpp文件生成静态库的那个头文件。
同样在属性里增加连接器 常规 附加库（目录）    输入 附加依赖项 （静态库名字）
同样的，链接不上。但是此时是改谁呢？改c++（c不可能认识c++的规则）
那么就在原本的cpp中的头文件里，对声明部分同样使用 extern"c"进行包含，重新生成静态库即可。这样c++符号库已经按c去生成了。
但是在运行程序，还是会报错，因为头文件展开的时候，extern "c"会暴露给c编译器，但是它不认识啊，所以出问题了。	
	#ifdef __cplusplus//c++的宏
	#endif
此时将c编译器认识不来的 extern "c"{}包含进这个里面 这样让c在预处理阶段屏蔽调了，c语言就可以运行通过了。






6.引用：
    给已经存在的变量取别名。
	int a = 0;  int& b = a;//int& 引用 表示起了个别名 （在变量前面加上 &表示取地址）和typedef 有点像 给类型起名字
			两者名字共用一块空间
    要求：1.定义的时候必须初始化 2.一个变量可以有多个引用，也可以给别名起别名（无限套娃） 3.一个引用一旦指向一个实体，那么之后不能指定其他的人。

    应用场景：1.做参数 -- a输出型参数
	比如 在交换数字的时候 原本是利用指针进行两个变量交换，此时可以使用引用作为形参，就不需要利用指针传递地址了。
	以前形参就是实参的拷贝，现在就是形参是实参的别名
	     -- b大对象传参，提高效率，不用传参  （暂时认为 引用不占空间）
	    2.做返回值 -- 
	一般来说，普通的局部变量，不能直接将局部变量作为返回值，因为函数调用完毕，内存会进行回收，这样传回去就是随机值了，所以一般返回变量的值，就会进行拷贝。 --> 传值返回  生成一个返回对象拷贝作为函数调用的返回值
	--传引用返回
	*返回对象的别名
	但是返回一个不随着函数调用完毕回收内存的情况（比如加上static，将变量放入静态区），就可以直接将整个变量返回了。但是如果返回普通变量，就发生了越界了，如果正确，只能是侥幸。
（出了函数作用域，返回对象就销毁了，那么一定·不能·用引用返回，就要传值返回）
	引用返回的场景：方便修改数组中的某个值，比如堆内存中。  传值返回不能加加（返回的是临时对象）
	-- 大对象返回
    作用：输出型返回对象，调用者可以修改返回对象，减少拷贝，提高效率   引用能做的，指针也能用，但是引用相当于堆指针的一种改进

    注意：只能权限平移，权限缩小。不可权限放大。
	const int c = 20;//c不能修改
	//int& d = c;//权限的放大 
	//只能权限平移
	const int& d = c;

	int e = 10;
	const int& f = e;//权限可以缩小   可读可写 -> 只读


	int i = 1;
	double dd = i; //*类型的提升会产生临时变量 不会改变原来的类型          
	//double& rdd = i;//引用不行，不匹配   *rdd引用的不是i，是临时变量

	const double& rdd = i;//加个const就可以了    *临时变量具有常性，若只是double& 那么就是权限的放大	

	const int& x = 10;//所以常量也可以 起别名
	#权限的限制 只是针对于引用和指针。普通变量赋值，就是拷贝，不需要考虑。
	#如果使用引用传参，*函数内不改变n，尽量用const引用传参

*引用和指针的不同点：引用必须初始化  只能有一个实体，指针是地址空间  指针更强大，但是不安全，引用局限，但是安全。

语法角度而言：引用没有开空间，指针开了4或者8个空间 32  64位。
底层实现角度：引用底层是用指针实现的。
	
	（*）汇编：mov移动...


7.内联函数：
	以inline修饰的函数叫做内联函数，编译时c++会在调用内联函数的地方展开，没有函数压栈的开销。
    短小的函数(1-10行)	场景：堆排和快排，排序10w数字，里面swap函数
    频繁的调用(10万次)
    C->宏函数       	宏的优点：a、代码复用性变强（宏常量） b、宏函数提高效率，不建立栈帧缺点：a、可读性差 b、没有类型安全检查 c、不方便调试
		宏在预处理阶段的时候会替换#define ADD(a, b) ((a)+(b))   里面的括号针对于运算符优先级问题，外面的括号针对于对整体进行处理	
	
    C++->inline    针对宏函数的优化 符合条件的情况下，在调用下展开。在函数声明且定义时前加inline关键字即可
	条件：1.空间换时间，代码很长或者有递归的函数不适宜使用作为内联函数
	2.inline只是一个建议，编译器会进行优化。具体看函数内部实现的编译指令长度（10行左右）
	之所以这么做的原因就是 展开的话，导致编译出来的可执行程序变大。简而言之就是执行程序里的指令很多。
注意：Debug版本下并没有展开，方便调试。在Relese下就可以了。
	3.inline不建议声明和定义分离，分离会导致链接出错。
          C++中基本不再建议使用宏 const enum inline


8.auto：
自动推导类型 和Python中的只加变量名自动推导类型差不多
	typeid(变量名).name()  ---->类型名
	价值：1.范围for遍历数组 2.类型比较长的时候，自动推导 3.....
注意：1.auto不能多行 2.不能做参数  编译的时候需要知道类型才能开空间 3.也不能声明数组


9.范围for：a[]a是数组
	for(auto e : a) //自动依次取a的数据，赋值给e，自动加加 自动判断结构   *只能传值接收 或者传引用接收 a不能修改
	{
	    cout << e << " ";
	}
	cout << endl;
注意：如果形参是数组，此时传的只是首元素地址，识别不出来是数组



10.nullptr：  
c语言里面的NULL在c++里面可定义成了0，所以有时会出现bug
所以c++补了这个坑 空就是用nullptr  ------   理解成 (void*)0底层	是关键字，作为NULL。
特别的：形参可以不用变量名





	



	