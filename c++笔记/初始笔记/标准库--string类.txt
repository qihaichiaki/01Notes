--字符串--   在标准库内，但是符合STL的规则
typedef basic_string<char> string     -- 类模板重定义(一般用gbk和utf-8)
	表示其他国家的文字<wchar_t> wstring;
string ：动态增长的char字符数组

扩展编码表：值和表示的文字符号的映射关系
ascall   -- 美国标准信息交换码    100多种    很好的表示英文        char 1byte 一个值映射一个符号  256
gbk  -- 中国                                                                               2char   2byte  65535（2^16）个汉字  和ascall兼容 
Unicode(计算机表示全世界的文字) 			同音字编辑到一起        净网就可以和这有关--国粹词库--但是有同音字 
	utf-8					就可以利用相近的关系进行全禁止
	utf-16
	utf-32（更好的表示更多国家的文字）

中文一个汉字就是两个char表示



string类不仅存了字符串，并且兼容了C最后一个字符存的是\0
重要的构造函数：默认构造函数""  以及参数const char* s
拷贝构造实现的深拷贝 -- 

string底层大概如下结构：
_str		h e l l o \0
_size  		5(有效字符)
_capacity		15(容量)


拷贝一部分构造函数
string s(s1, y , n);  即从下自妇女标y开始拷贝n个字符
如果n给的很长 就拷贝到s1的字符串的结尾，如果不给n，n使用其缺省值，（n = npos）（static const size_t npos = -1）--整形的最大值     拷贝到结尾。

只用字符串的前几个进行初始化
string s("" , n);

用n个字符组成一个字符串去初始化
string s(n, '');

注意 string s = "";是构造（隐式类型转化） ：构造 + 拷贝构造  -- 优化
赋值重载：
string = string
string = ""
string = ''





成员函数：

数组相关：
重载了[]   -- 让string能像数组一样
读写某个位置的字符
s[0]  -- s.operator[](0);   并且引用做返回 --a、减少拷贝 b、便于修改此位置的字符（修改返回对象）
但是有的const对象不可以修改，但是可以读，所以重载[]也要注意修改const

size()  -- 返回字符串的总字符个数
length() -- 也是返回字符长度（推荐size   -- 比较通用 ）
数组越界 -- 内部会检查越界  -- 断言（断言是程序直接终止）

at(pos);  -- 和[]类似  但是区别就是失败抛异常（越界）（捕获异常 程序继续运行）
isalpha()库函数 可以实现检查传入的是不是字母

*迭代器遍历字符串：iterator  四种迭代器  正常 reverse_正常    const  const_reverse
内嵌类型(内部类)：string::iterator it = s.begin();（最开始的位置）  -- 类似于指针   -- 返回一个迭代器（iterator）
s.end() -- 最后一个位置的下一个位置（\0位置的iterator）
iterator 像指针一样的类型 可能是指针，也可能不是 但是用法和指针一样
实际上 begin,end -- [begin, end)

string不太喜欢用迭代器，因为其有[]重载    但是迭代器  必须要学    
因为：string、vector不喜欢用iterator，[]会更好 但是  list/map/set...只能用迭代器访问

*因为iterator是容器stl通用的访问遍历方式
--不暴露底层实现，提供通用便捷类似的访问方式

注意在使用迭代器遍历的时候，使用!=作为循环条件，不使用<,因为只是string、vector是连续的空间，是真正的地址，但是当链表的时候就不支持了，因为地址空间不是连续的。

范围for：所有的容器也可以使用        -- 自动迭代，自动判断结束
范围for的底层就是迭代器
for(auto ch : s)
{
	cout << ch << " ";
}
cout << endl;
这里的ch就是s的拷贝  要修改就需要加引用 auto&

倒着遍历：利用反向迭代器 string::reverse_iterator rit = s.rbegin();
			while (rit != s.rend)
			{
				cout << *rit << " ";
				++rit;  -- 一样的还是加加
			}
目前反向迭代器可以如此理解：
	(]  右边是最后一个，左边是第一个前一个    (rend,rbegin]


当然，使用const对象的时候，就要使用string::const_iterator it;
当然，此时可以由右边的参数，自动推导左边的类型 auto   -- 熟练后在使用

反向const就是  -- const_reverse_iterator rit = str.rbegin();
C++11增加了普通可以调用begin、const调用cbegin.....



给原本string 插入：

尾插：
插入字符：
push_back('');
插入字符串
append("");

更好用的+=运算符重载
string += ''; //字符
string += " ";//字符串
底层调用的是成员函数 push_back()、append();

append迭代器 （迭代器区间均是左闭右开）
s.append(str.begin(), str.end());  意义：可以控制区间进行追加

头插：
insert();  -- 头插 不建议多次使用 -- 效率低下
size_t pos(指定位置)  const string& str, ...

删除字符：
erase(size_t pos, int npos); -- 过大就删除到末尾  

替换字符：
replace


关于string的增容：
max_size() -- 查看其字符串长度的最大值--写死的（整形最大值）
capacity() -- 查看的当前的容量

vs底部扩容机制：（注意容量没有算\0的空间  -- 即有效空间） 15(16)、31(32)、47、70、105......vs13
Linux g++     0 1 2 4 8 16 32 64 .....
不能依赖底层实现。

避免扩容的话，可以提前*开空间   扩容会消耗的  -- 这样可以减少消耗
reserve(n); -- n不一定是对应的n 考虑内存对齐等   保留的意思
reverse 逆置

！（还需要测试）resize(n, '字符') -- 开空间加初始化  如果 n 小于当前字符串长度，则将当前值缩短为其第一个 n 字符，删除第 n 个之后的字符。
两者扩容若扩容n比原本小，则不做变化




兼容C的字符串：c_str();
比如用c的形式读文件：
FILE* fout = fopen([string], "r");此时直接传不行  -- 直接返回c形式的字符串 -- 底层的str返回
[string].c_str();
char ch = fgetc(fout);
while (ch != EOF)
{
	cout << ch;
	ch = fgrtc(fout);
}


这里需要区分  char* 和 string的流插入重载：
string 以size结束
char* 以\0结束




查找一个字符、字符串、string对象
size_t find("", size _ t pos = 0)(size_t  unsize int)   没有返回 -1（无符号） --- npos最大的整形
pos


substr  -- 取子字符串构造一个新的string
pos 此位置开始   n多少字符
substr(pos, n)
从某个位置开始取 n均默认给npos  -- 有多少取多少

rfind("")  -- 倒着找

网址名：
协议名:（https、ftp）//域名/请求....
 
注意：find是要求全部匹配的，但是find_frist_of("", )是找对应的字符串的全部字符  -- 返回其位置


string支持比较大小 -- ASCII比


特别注意，cin和scanf类似，如果输入多个值  用空格分开或者换行  遇到空格、换行就读取进入，所以当需要多次输入就要循环了。
当输入字符串需要有空格的时候，就使用函数：
string str;
getline(cin, str);


string下的转类型好用 -- （atoi、itoa 一开始使用对的）

to_string -- 转字符串类型
stoi -- 转整形
stod -- 转双精度浮点型
注意，浮点数是无法精确存储的，会精度丢失



<<剑指offer>> -- 算法题可以刷了
寻找字符串中唯一出现的字符下标：使用计数排序就好


注意判断是否大小写时，注意是否存在数字，存在数字就不能直接用ASCII码值加减了






string的模拟实现：

区分库里实现的 -- 命名空间
构造函数： 
使用size_t 目前个数、capacity容量  注意--这里均是有效字符个数

注意默认的字符串不可给nullptr -- 需要给一个字符 '\0'    给空的话 -- 在返回


拷贝构造：深浅拷贝
默认的拷贝构造：内置类型 -- 值拷贝、浅拷贝
但是这种对于指针就会存在问题
--自己实现深拷贝：
 指向自己独立的一块空间 new capacity+1
strcpy  -- 拷贝


默认的赋值重载同样也是浅拷贝 -- 此时就会出现两个问题：1.内存泄漏（原本的空间没有释放）2.指向同一块空间
但是注意此时是有着两份空间的 把原空间给释放掉 （注意自己给自己赋值）
new新空间     --最好先开空间

//上述的拷贝构造和赋值重载为原始写法，下面是现代写法：-- 老板思维 -- 让别人来干
拷贝构造：
string tmp(s._str); -- 借助带参（c字符串）的构造
swap(_str, s._str);
swap(_size, s._size);
swap(_capacity, s._capacity);
但是光上面不行，因为会换随机值给它，delete随机值是会崩掉的，所以需要初始化列表进行初始化才行 nullptr 0 0   delete 空是没有问题的   swap三行也可以写成一个成员函数，里面使用库里的swap函数即可。
赋值重载：
同理，让局部打工，让其帮自己拷贝和释放自己的空间
当然，如果把参数const string& s换位传值传参的话：string s 就可以直接将参数s当为tmp  -- 最为简洁的


swap对于内置类型消耗不大，但是对于自定义类型实现深拷贝后代价会非常大，所以需要自定义类自己实现一个swap消耗减到最小

在类里面的赋值重载里面调用库里的swap一定要小心，防止递归--（swap里面会调用赋值重载）




iterator实现：string就是返回指针

反向迭代器是所有的容器通用实现的 -- 适配器(以后实现)

[]

void reserve(size_t n);//保留 -- 提前开空间   capacity比n大就不开空间


push_back(char s);
常规尾插 -- 判断是否满了

append(const char* str);
有长有短
首先判断插入的字符串的长度，就要判断是否其和容量的差距 -- 但是不能直接扩二倍，因为有可能追加的字符串大于原本容量的2倍。--多种方法：但是至少需要size+n的容量大小：
cp时，可以让strcpy从_str + _size 开始复制即可，str。
strcat()追加也可以（但是注意strcat会找\0 -- 效率低下 -- 能不用就不能用）
append(const string& s)
{
	append(s,_str);
}


operator+=
复用push_back;和append();即可。

随机插入字符：
string& insert(size_t pos, char ch)
{}//小心pos = 0的时候如果时end >= pos  在循环里面无符号 -- --的话就会出现问题，会死循环  -- 当然，也可以控制循环条件，细节在做出改变（end > pos） ==pos就终止了，使用之前的条件也可以利用强转进行变换


string& insert(size_t pos, const char* str)
{}
实现逻辑和上面差不多，只不过需要画图分析， -- pos 和len之间的关系
这里可以使用strncpy(起， 被拷贝字符串， 个数)（strcpy就不能使用 -- 会把\0拷贝进来

void erase(size_t pos,  size_t len = npos);对应位置删除几个字符
npos就是一个静态成员变量 -- -1；（size_t）
(注意，静态成员变量不能在类里给值（声明）--但是加上const就可以了)const static C++语法的特殊处理，这里就可以之间当成初始化

如果删的超过size -- 后面就要删完，无需挪动数据
--直接在当前位置给\0,size = pos即可
当然，如果正常删的话，就需要挪动数据（中间删除，后面的数据往前挪去覆盖） -- 自己挪或者使用strcpy();//注意查看是否重叠（前、后，解决不了就是要用memcpy）


//寻找子串
size_t find(char ch, size_t pos = 0);
从pos位置开始寻找第一个
size_t find(const char* sub, size_t pos = 0);
可以复用c语言中的也是寻找子串的 strstr(被找指针， 要寻找指针) -- 返回的也是指针
没找到就返回nullptr
匹配到了就返回那个指针的位置 （不用遍历， 因为是连续的地址，只需两个指针相减就好）
(除了strstr（暴力匹配）外，还有kmp算法 -- 但是实际效果不太行  还有一个算法bm算法)

任何的类比较大小只需要写> == 即两个其余均可以实现复用
>
	依次比，ASCII小就小，大就大  -- 可以复用一下strcmp(当前指针， 目标指针) > 0;
<

 ==
>=

<=

substr构造子串：



流提取、流插入的重载：
string s1;
cin >> s1;
cout << s1 << endl;
但是此时的流插入重载就不用是友元了，因为可以访问其对应的数据  需要循环打印字符数组即可，直到size即可


istream& operator>>()
流提取：以空格、\n为区分 
如果输入内容很多 -- 很长 -- 频繁扩容效率很低 -- 想办法优化（方案一：可以一上来就reserve128 但是这样的话插入字符串少的话，就会浪费空间）
但是注意 -- cin 获取不了空格和换行  (cin的特性)   -- 认为其为分隔符 -- 会忽略    特性空格和\n表示不同之间的间隔
所以使用（io流）里的成员函数：in.get()就可以了 
方案2：可以不用在第一时间就插入s中去,定义一个字符数组，先存入这个里面里面，大小自己决定，当满的时候，在一次性加入string中即可。 -- 类似于缓冲区的意思
但是注意，原本空间的原本数据应该清理调：

clear();//数据清理：
直接把第一个数据为\0即可
然后size置为0即可

resize：开空间并且初始化
大于原本的size就要插入数据
	套用reserve(n),先扩容，然后在插入数据即可
--会插入数据，也会删除数据  --- 会影响数据的存在

小于原本的size就要删除数据


string类的实现，考验的就是：
顺序表的学习 && 类和对象
扩展版的顺序表


vs下的string还做了一些不一样的东西：
一开始就开了一定的空间 -- 16字节的数组  我们实现的就是12  它的是28sizeof(string);
< 16就存入_buff中，大于等于16，就存在_str指向的堆空间
以空间换时间

Linux下的同样存在差异：
g++：
现有方案：
_str
_size
_capaicity

--拷贝的代价会很大 -- 深拷贝
思考：能不能浅拷贝 -- 之前的方案不行：1.析构两次 2.两个对象指向同一份的数据储存空间（一个对象修改影响另一个对象）

引用计数+写时拷贝：
a、针对问题1，多少对象指向它，计数就是多少
每个对象析构时，减减引用计数，最后一个在释放空间
b、针对问题2，写时拷贝。--还是要做深拷贝，延迟拷贝 -- 谁去写，谁就去做深拷贝。
	




