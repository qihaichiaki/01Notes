C++11 -- 增加的特性非常多-学习常用的即可

1.一切皆{}  列表初始化
	int x = 1
	int x = { 2 };
	int x{ 3 };

	// 自定义类型-调用构造函数 C++11
	Date d1(2022, 11, 13);
	Date d2 = {2022, 11, 11} 
	Date d3{2022, 11, 12}; // 同理
// 列表初始化有用：所有的容器均支持如下操作
	vector<int>v = {1, 2, 3, 4, 5};
	vector<int>v {1, 2, 3, 4, 5};
C++11里面认为{}可以是一个新的类型-typeid(x).name::initalizer_list -- {}  可以像迭代器那样去使用 所有容器的构造就可以支持此类型进行构造。
	vector<Date> v3 = {d1, d2, d3};
	vector<Date> v3 = {{2022, 1, 1}, {2022, 11, 11}, {2022, 11, 12}};
	(支持了多参数的隐式类型转换)
	map<string, string> dict = {{"sort", "排序"}, {}}// 首先支持initalizer_list构造，其次就是默认类型转换。
谨慎使用~
	dict = {{"left", "右边"}};  //赋值重载

列表初始化：C++11以后都可以使用列表初始化，普通对象还是用以前的初始化，容器如果有需要就可以使用。
2.auto
当类型过于长，使用其非常方便 -- 但是如果不熟悉代码，需要自己查看类型。-- 降低代码的可读性
3.decltype
和typeid().name()  --和此类似，但是返回只能是一个字符串，不能用这个再去定义对象。
	int x;
	decltype(x) y = 20;  // 此时拿到的是一个类型 类似于auto，但是和其的意义不一样哦~~~
	decltype(x) y1 = 20.20;  // 由传入得到x决定的类型。
	auto 右 = 20.22; // auto是由右边决定的

	template<class T1  T2>
	decltype(T1*T2) y;

4.nullptr
	NULL在C++中宏定义成了0。	nullptr((void*) 0)
5.范围for  -- 底层就是替换成了迭代器
*6.智能指针  -- 后面重点讲解

7.STL中的一些变化：
	unordered_map  unordered_set  增加的新容器的亮点就是利用哈希表实现的map和set

	array、forward_list  --------鸡肋-食之无味弃之可惜。
	array  -- 静态的顺序表
		class T size_t N   []  迭代器
		C++11支持array的初衷--想要替代C语言的数组  -- 越界检查、容器化
		C语言的数组，越界读基本检查不出来，越界写时抽查。但是array就不一样了，都可以被检查出来。
		但是用的很少 -- 一方面用C的数组用惯了，另一方面用array不如vector->vector + resize  另外array可能导致栈溢出。是在栈上开辟空间的哦。
	forward_list 单链表 优势：比其list（双向链表）空间节省那么一丁点
		但是给的接口比较怪：erase删除下一个，insert_after  插入后面


容器里方法的变化：
	1.都支持了initializer_list构造，用来支持列表初始化。
	2.比较鸡肋的一些接口：cbegin、cend系列（不够明确？）
	// 3 - 4提高效率
	*3.移动构造和移动赋值。set(set&& x)  set& operator = (set&& x);
	*4.右值引用参数的插入。insert、emplace	





------------------------------------------------------------------
左值引用 和 右值引用：
	左值引用就是之前的C++的引用。
	-左值的理解：**可以获取地址+（也可以不能）可以对其赋值。左值可以出现在等号的左边或者右边。
	int a = 10;  const int b = 20; int* p = &a;
	左值引用就是对这些左值取别名。
							（表达式不一定是内置类型，自定义类型同理）
	-右值：不可出现在赋值符号的左边，并且无法获取地址。比如：10 表达式（x+y）fmin(x, y);  // 临时对象 - 右值
	右值引用：给右值取别名 int&& rr = 10;

	赋值符号的左边必须是可以修改的左值。

	可以有条件的支持交叉引用：

	-左值引用可以引用右值吗？普通的不可以，但是加上const左值引用就可以了。为什么有这种需求呢？传函数参数
	    Func(T x)  -- 左值和右值都可以给
	    Func(T& x)  -- 只能给左值
	    Func(const T& x)  -- 左值和右值都可以给 并且减少拷贝
	
	右值引用可以引用左值吗？普通的不可以，但是加上move(x)就可以了。move是库里的函数
	-注意，右值无法取地址，但是右值引用可以被赋值可以被取地址。当然const加上就无法被修改了。
	---右值引用就会变成了一个左值。

	-右值引用有什么用？ 
		-引用的价值：减少拷贝
		C++98 - 不区分左值和右值的引用的
		-左值引用解决了哪些问题：
			1.做参数。a减少拷贝 b做输出型参数
			2.做返回值。a减少拷贝 b引用返回，可以修改返回对象(operator[])
			(只解决了一部分问题)

	常见左值引用解决不了的场景：to_string 就是内部的局部变量 返回想用引用不可，局部出作用域销毁。当局部变量很大的时候就非常恐怖了。C++98左值引用面向上述场景：全局 - new - 输出型参数（（最佳）传入一个引用进行接收，代替传出的参数 -但是这样不太符合使用习惯）		（问题：谨慎、异常-内存泄漏）
	
	右值引用就是解决上述问题的。
		注意，在原本的返回右值的话，编译器会进行优化，比如原本两次的拷贝构造在VS下优化调了1次（debug），G++下一次都不给（默认reles）。
	优化后，临时对象就不会在产生了。（但是只是针对于直接拷贝赋值。如果赋值的话，那么就优化不了，所以需要临时对象的）
	
	// 移动构造、移动赋值：
	string(string&& s)  // 
	{
		swap(s);
	}



	右值划分:1.内置类型右值 -纯右值（x+y、.....） 2.自定义类型的-将亡值 + move
	移动构造直接交换（将传出来的值识别为右值（临时对象），和外面的接收的对象进行交换，临时在调用析构 -- 节约了一次拷贝）不用拷贝，加上移动构造：移动构造+移动构造（首先将内部移动构造给临时变量然后 会将返回出来的临时值--将亡值 - 移动构造）。-优化：移动构造。（直接对外面和内部进行移动构造）
		没有移动构造，在返回就要走深拷贝，原本空间没有充分利用。
	- 减少了拷贝 不是直接像左值引用那样返回，而是通过了移动构造。
	string s =  to_string(111);


	// 移动赋值
	string& operator=(string&& s)
	{
		swap(s); // 我把我原来的给你-将亡了，将亡的给了我。将亡的就会调用析构函数 -- 本身临时对象
		return *this;
	}

	string s;
	s = to_string(111);

	原本：拷贝构造 + 拷贝赋值
	现在：移动拷贝 + 移动赋值
	

	有了这种，那么传值返回就不需要害怕了。就不用做那么多的深拷贝了。
	-传局部对象返回  解决的就是这个问题。

	-除此之外，插入接口都会增加右值引用的版本。比如：push_back()也加入了传右值引用。
		同样的，传入的是左值，就只能规矩的赋值或者拷贝构造。如果是右值，那么就可以大胆的交换资源，就不用进行拷贝了。
	insert
	（C++-11后）



	-如果模板提供参数是&& - 此时引用就是万能引用--引用折叠。
		此时模板类型T对应的t对象，此时既能引用左值，也能引用右值。
		-右值引用就会变成了一个左值。-语法特性 -- 传左值，会被折叠，传右值 -- 但是此属性还是左值。
		属性统统都是左值。--那么如何保持呢？
	-完美转发，会保持模板参数引用对象原来的属性 std::forward<T>(t);
	使用场景：ed：List -- push_back 传入，如果没有完美转发，那么就会被折叠成左值引用。所以就需要完美转发一下。  -- 只要此参数在往下传递，就都必须要完美转发。
	总结：确定的类型，就是右值引用。如果是模板，那么想要保持属性，就要一直往下传。
			



-------------------------------------------------------------------------------------------------
原本的默认成员函数：6：构造 析构 拷贝构造 赋值 取地址  （左值的拷贝）
C++	新增两个	 	移动构造  移动赋值 （右值的拷贝）--（深拷贝才会体现价值）

注意：1、拷贝对象需要深拷贝时，自己写移动构造和移动赋值。ed：string、vector、list
          2、如果没有实现移动构造并且没有实现析构、拷贝构造、拷贝赋值中的其中一个，此时编译器会生成默认的移动构造。A、内置类型值拷贝，自定义成员有移动构造调用移动，没有就调用拷贝构造。
	--需要注意这是C++11的，需要注意编译器是否支持
          3.如果没实现移动赋值函数，并且没有实现析构、拷贝构造、拷贝赋值中的其中一个，此时生成默认的移动赋值，内置值拷贝，自定义类型有实现移动赋值就调用，没有就调用拷贝赋值。
	（大多数条件下不会让编译器默认生成的）
基本上-析构、拷贝构造、拷贝赋值都是绑定在一起的。
-实际上对于默认成员函数均可以进行强制生成、但是会互相影响。-但是强制生成一般用于默认构造。default
-不想让类进行某个默认成员函数的功能 delete
C++11 - 8个默认成员函数


--要求delete实现，一个类只能在堆上创建对象。
（也可以在私有域进行构造即可）
	~HeapOnly() = delete;
此时使用new就可以，因为是指针，无法调用其析构。但是如果此类有需要资源释放的话，可以专门搞一个接口进行释放资源。--类似于C语言的使用。但是注意自己的申请空间operator delete(free) (ptr/this); 这样就避开了调用此类的析构函数。
	

---------------------------------------------------------------------------------
可变参数：C - printf(const char*, ...)  -- （底层中使用数组进行接收）
模板参数 -- 类型（除开非类型模板参数-整型）

template<class ...Args> - 模板参数包
void test(Args... args)  -- （这样就是0到多个参数）函数参数包
	
	那么在函数里面如何通过函数包拿到对应的参数呢？
		首先 计算大小： sizeof...(args)  -- 参数包的个数
		// 注意不能直接支持[]下标去取具体的参数
		1.增加一个模板参数	class T 函数参数第一个传入const T& val;
			cout << val << " ";
			test(args...);  -- 递归调用每次去推参数包的每一个参数。此递归是编译时推的，但是注意当零个参数的参数包的时候，在写一个对应的零个参数的test即可。
		2.如果只有一个函数包呢？
		int a[] = {(PrintArg(args), 0)...};  // 展开 - （以右边的为初始化 - 依次展开初始化）
				

		template<class T>
		void PrintArg(const T& x) cout << x;


		实际上可以：int a[] = {PrintArg(args)...};
		int PrintArg(const T& x) cout << x; return 0;

	emplace
--容器的可变函数包
template<class... Args>
	void emplace_back(Args&&... args); - 万能引用

	vector<pair<string, int>> v2;
	v2.push_back(make_pair("sort", 1));	构造+拷贝构造或者移动构造（看什么值）
	v2.emplace_back("sort", 1);		构造
		其实也没有什么大的区别。list可以测试出来，vector估计底层实现不同。
	

--------------------------------------------
lambda表达式 -- 匿名函数
	像函数一样使用的对象或者类型：
		1.函数指针 2.仿函数/函数对象 3.lambda


	[捕捉列表](参数列表) mutable ->返回值类型 {函数体实现}
		返回类型确定大多时候可以不写。
		参数列表无参的时候可以不写
		最简单的：[]{};
	
	1// 两个数相加的lambda
	[](int a, int b)->int{return a + b};(->int可以不用写)
	实际上此时这一列返回的就是一个函数对象 -- 没有明确的名称，但是可以使用auto进行推导。
	auto add1 = 接收，然后就像普通函数进行调用即可。

	2捕捉列表有什么用？ 捕捉父作用域内的
	// 交换变量的lambda
	auto swap1 = [](int& a, int&b){int tmp = a; a = b; b = tmp;};// 达咩，难看
	auto swap1 = [](int& a, int&b)
	{
		int tmp = a; 
		a = b; 
		b = tmp;
	};
	auto swap1 = [](int& a, int&b){std::swap(a, b)};

	// 不传参数交换x和y呢？
	auto swap2 = [x, y]  // 捕捉列表里必须是同一作用域的对象 此时参数也就可以不用传
	{
		int tmp = x; 
		x = y; 
		x = tmp;
	};
	auto swap2 = [x, y]()mutable// 捕捉列表里必须是同一作用域的对象 此时参数也就可以不用传
	{
		int tmp = x; 
		x = y; 
		x = tmp;
	};
	但是默认捕捉过来不可修改：1. 加mutable 但是实际上没用 - 因为默认捕捉是传值的捕捉，就完成不了交换实参的量了。
	2.
	auto swap3 = [&x, &y]()// 捕捉列表里必须是同一作用域的对象 此时参数也就可以不用传
	{
		int tmp = x; 
		x = y; 
		x = tmp;
	};
	提炼：
		捕捉某几个变量（传值捕捉-内部不可改变）：[x, y]
		（拷贝捕捉）[x, y]()mutable
		[&var] 引用捕捉
		[&]引用传递所有变量
		[=]传值捕捉所有变量
			可以混合使用，但是不能相同捕捉进行重复-

说明：lambda 只可以捕捉父作用域中的局部变量 - （父作用域是指？当前所在函数栈帧所在作用域。小心全局变量-全局变量的作用域也在函数栈帧所在作用域）-这里只看作用域的范围

变量：
	1.生命周期（存储区域）
	2.作用域（编译器编译，用的地方能否找到的问题）
[] 本质是在传参 


底层原理：和范围for类似 - 是通过仿函数实现的
	-通过汇编的角度去看	lambda + uuid（唯一标识符）
		-仿函数名称：lambda_uuid - 对于编译器而言 
	-捕捉[]、或者参数() 均是传参

两个lambda类型不可相互赋值，但是可以赋值给相同类型的函数指针。

-----------------------------------------------------------------
包装器 - 了解
	ret = func(x);
		-func：函数指针、仿函数对象、lambda对象
	当想要通过对于的func 想只实例化成一份如何呢？-包装一下
		// 网络里面会经常处理事件响应 
		// 事件？-快捷键组合，需要一个响应完成对应的动作
		map<string, 函数包装器>//string 对应一个功能的名字
	-functional 头文件
	template<class Ret, class... Args>
	class function<Ret(Args...)>
	
		-使用
			function(返回值类型(参数包)) 对象名 = 函数指针/仿函数对象/lambda对象/成员函数（非静态成员函数-&类名::成员函数指针）
		-注意：如果调用成员函数（非静态），是必须要传一个对象的 对象名(类对象， 参数);
	
	此时将包装器包装成统一的类型 函数指针、仿函数对象、lambda对象都可以

---------------------------------------------------------------------------
bind - 了解 绑定
	template<class Fn, class... Args>
	bind(Fn&& fn, Args&&... args);  - 适配器 - 对参数的适配、调整参数
		placeholders 占位 - 是一个命名空间
	
	比如：1int test1(int int)                2struct Test{int test2(int int)};
	function<int(int, int)> f1 = test1;
	function<int(Test, int, int)> f2 = &Test::test2;
	--如何将上面的参数统一呢？
		-调整参数顺序	placeholders 占位
			int x = 1, int y = 2;
			test(x, y);
			auto bf1 = bind(test, placeholders::_2, placeholders::_1)//调整的为形参顺序 -利用占位_1 _2 _3  代表对应的形参		bf1也是一个函数对象
			
		
		-只是想绑定参数呢？（两者可以同时进行）调整个数-绑定固定的参数
				function<int(int, int)> f2 = bind(&Test::test2, Test(), _1, _2); -- 变成只传两个参数，有一个参数是固定的参数，只需要传入两个参数了。
		

	
			

	






  