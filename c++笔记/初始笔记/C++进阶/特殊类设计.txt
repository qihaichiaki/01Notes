1.设计一个类，不可被拷贝
	c++98 只声明不实现，在私有	c++11 - delete

2.设计一个类，只可以在堆上创建
	1.析构函数私有即可。(new 没有堵住)-但是想要释放堆上的对象也会释放不了。-创建一个函数进行显示去掉。
		
	创建函数显示去析构：
		void Delete() delete this;
	
	2.拷贝构造函数、构造函数进行私有。(此时都被堵死了) - 此时提供一个公有的创建此类的接口 - return new lei
		但是此时存在问题，如果是单纯的成员函数，没有对象就无法进行调用，所以可以设置为静态函数。
	

3.设计一个类，只能在栈上创建对象。
	构造函数私有 - 提供公有接口，返回栈上创建的对象即可。 -- 但是会存在拷贝构造。-返回对象可是要拷贝构造的，所以防拷贝是不行滴。防不了static，new是可以的，在类里void* operator new(size_t n) = delete;-即可。


4.不可被继承的类
	c++11 - final c++98 构造函数私有化



--------------------------------------
单例模式
5.请设计一个类，只能创建一个对象。-设计模式（java很看重，C++不是很看重，比如迭代器、适配器就是一种设计模式）
	只有一个实例，被所有程序模块共享-一个进程里面 - 一个访问其的全局访问点。
	
两种方式进行设计：
1.饿汉模式：一开始（main函数之前）就创建对象。
class MemoryPool -- 假设
{
public:
	static GetInstance() {return _pint;}  // 获取该对象
	
priavte:
	// 构造函数私有化
	MemoryPool()
	{}
	char* __ptr = nullptr;
	
	static MemoryPool _inst;  // 不属于某个对象的成员-是静态区的 -声明
	（也可以	static MemoryPool* _pinst）
};
MemoryPool MemoryPool::_inst; // 定义
MemoryPool* MemoryPool::_pinst = new MemoryPool;

优势：简单、没有线程安全问题。
缺点：1、一个程序中有多个单例，并且有先后创建初始化顺序要求时，饿汉无法控制。（比如：程序中两个单例类 A 和 B，要求A先创建初始化，B在创建初始化。 - 静态变量是不可确定的（多个文件的情况下）和静动态库。2、饿汉单例类，初始化时任务多，影响程序启动速度。



2.懒汉模式：第一次使用对象时在进行创建实例对象
class MemoryPool -- 假设
{
public:
	static GetInstance() {
	if (_pint == nullptr)
	{
		_pint = new MemoryPool;
	}
	return _pint;
	}  // 获取该对象
	
priavte:
	// 构造函数私有化
	MemoryPool()
	{}
	char* __ptr = nullptr;
	
	（也可以	static MemoryPool* _pinst）
};
MemoryPool* MemoryPool::_pinst = nullptr;

优点：1.控制顺序。2.不影响启动速度。
缺点：1.相对复杂。2.线程安全问题要处理好。



单例对象的释放问题：1.一般情况下，不需要释放的：整个程序运行期间都就可以用。生命周期随着进程的生命周期。进程正常结束后，也会资源释放。2.有些特殊场景需要释放，比如单例对象析构，要进行一些持久化（往文件、数据库写）操作。用回收对象去包含析构其中资源，回收对象-main函数结束后一定会做的。