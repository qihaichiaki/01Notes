yum - 软件管理器（包管理器） 主要发型版本：centos
（对等于浏览器下软件或者手机的应用商店）
1.搜索，下载，安装（原生的Linux系统，内置的下载链接基本都是自己配套的国外的网址）

2.解决依赖关系（下载其所需的动态库 -- 链接所需要的等等需要的组件）

yum是Python写的小工具
yum源：配置文件	下载一个epel-release
查看配置文件：/etc/yum.repos.d
基本配置文件：

yum list
把Linux下能下载的软件显示出来：

yum search sl -- 搜索命令显示 sl名字的软件（不推荐）

yum list | grep sl  -- 和上面搜索命令类似，但是更加美观
名字、位      版本       提供商

yum install 软件  -- 安装软件（需要较高权限）
-y选项表示不需要问我是否要安装

yum remove 你的软件移除
-y同理不需要提示


（娱乐一下）links 访问网址

更新的时候，需要更新的就是动态库等...





git
--多人协作
1.什么是版本控制：git --version 查看其版本
写代码实现各种版本以及每个版本的分支的过程
	（版本控制器：git与svm）


2.git的历史
一个版本控制器
3.git操作，git三板斧
预备：git clone 克隆仓库网址
	.git就是用来同步的

添加：git add 你的文件（添加到本地文件 .就是当前目录下的所有文件）
git commit -m "这里必须写提交日志"  -- 本地路径（你的系统里存在的git仓库）
git push：同步Gitee上的代码  
git只会记录变化部分
其他情况：
1.登录邮箱Run
2.git pull 重新克隆代码（即同步代码 -- 本地代码和远端代码不同步会强制同步）
3.gitignore文件 #不想提交某个些文件到远端git仓库，就可以添加到这个文件内




gdb
*调试器*  -- 会操作
1.背景认识：gcc以及g++默认形成的可执行程序是（动态链接的）release的，无法直接被调试
要改成debug版本需要在gcc或者g++命令后添加 -g选项
readelf -S -查看可执行程序的各个分区：

进入gdb   gdb 可执行程序(debug版本)

默认显示：list（l）
全部显示 l 0
直接回车会执行上一条历史命令（如果命令没有变化可以直接回车）

运行到第一个断点处run（r）开始调试 -- 类比于vs F5 没有断点就直接运行结束

打断点： b 18  （breakpoint）在第十八行处打断点

查看断点：info b

删除断点：d num 此num是打断点时的编号，可以通过查看断点进行查看

逐过程：next（n）执行一步  -- 类似于vs F10

打印变量值：p 变量

逐语句： step（s） 进入函数 -- 类似于vs F11

查看调用堆栈：bt

将函数跑完：finish

常显示变量的值：display 变量

取消常显示：undisplay num num同样是编号，display会显示编号

跳转指定行：until 行（只建议在函数内执行）

c：运行下一个断点处停下来

（在info b查看 有Enb选项 - 开关）
关闭断点：disable num 
打开断点：enable num

修改变量 ：set var 变量 = ...




quit退出
