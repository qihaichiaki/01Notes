面试题：描述一下，fork创建子进程，操作系统都做了什么？？？
	fork创建子进程，系统里多了一个进程。--PCB--地址空间 页表  调度 -- 页表将代码数据加载入内存 ....
	进程 = 内核数据结构  + 进程代码和数据！
		OS     	     一般从磁盘来--C/C++程序加载之后的结果
	
	OS会做：1.创建空间 分配新的内存块和内核数据结构给子进程
	               2.初始化 
	               3.添加入运行队列
	               4.fork返回
	
	创建子进程，给子进程分配对应的内核结构，必须子进程自己独有了，进程具有独立性！理论上子进程也有自己的代码和数据，一般而言，但是没有加载过程，没有自己的代码和数据，所以子进程使用“父进程的代码和数据”
	代码：都是被写的，只能读取，父子共享没有问题。
	数据：可能被修改的，所以必须分离。
		对于数据而言：1.创建进程的时候，直接拷贝分离。？可以，但是运行 访问所以数据 是否读写  --可能拷贝子进程根本不会用到的数据空间，即便是用到了，也可能只是读取。（编译器编译程序的时候，尚且知道节省空间）--创建子进程，不需要将不会被访问的或者只会读取的数据，拷贝一份 -- 没有必要   -- 但是，你还是必须要拷贝 （独立性） 什么样的数据值得拷贝？将来会被父或者子进程写入的数据！
	--一般而言即使是OS，也无法提前知道哪些空间可能被写入    --- 提前拷贝了，你会立马使用吗？（中间可能存在很多过程）
				-- 所以OS选择了写时拷贝技术，来进行将父子进程的数据进行分离。
		*2.写时拷贝（对父子进程进行分离（数据分离两个进程就以及是具备独立性的了））
			1.用的时候，再给你分配，是高效使用内存的一种表现
			2.OS无法在代码执行前预知哪些空间会被访问
		可以和C++中的string的一个深浅拷贝问题进行类比 进程分离的时候不就是拷贝一份嘛。
fork之后，代码共享就是所有的。
	1.我们的代码汇编之后，会有很多行代码，而且每行代码加载到内存之后，都会有对应的地址
	2.因为进程随时可能被中断（可能并没有执行完），下次回来还必须从之前的位置继续运行。要求CPU必须随时记录下进程执行的位置，所以CPU内对应的有寄存器数据，用来记录当前进程的执行位置。
	EIP（PC指针）程序计数器：当前正在执行代码的下一行代码的地址。
	（CPU = 取指令 分析指令 执行指令（无脑））
		寄存器在CPU内，只有一份（一套），寄存器内的数据可以有多份的。-- 进程的上下文数据 - > 创建的时候也会给子进程，各自调度，各自会调整EIP，但是不重要了，子进程以及认为自己的代码从当前位置开始。

CPU 一般有指令级

		写时拷贝的过程：
		页表的权限只读，此时子父进程指向同一块空间  父进程或者子进程发生写操作了后，才会分离物理空间，此时页表的权限只读也就修改了。
	因为有写时拷贝技术的存在，所以，父子进程得以彻底分离！完成了进程独立性的技术保证！（写时拷贝的好处）
	写时拷贝，是一种延时申请技术，可以提高整机内存的效率



进程终止：
	释放进程申请的相关内核数据结构和数据和代码（本质就是释放系统资源）

	进程终止的常见方式：
		a.代码跑完，结构正确		main函数的返回值 return 0的意义是什么 0的含义是什么，为什么总			b.代码跑完，结果不正确		是0？实际上，0 success 非0结果不正确  $?获得最近一个进程执行完							毕的退出码 echo $?  *返回给上一级，用来评判该进程执行结果用的，							可以忽略。main函数是自己设计的，可以自己设置运行结果的对不对							，控制main函数的返回值 非零值有无数个，不同的非零值就可以标识							不同的错误原因！->(*给我们的程序在运行结束后，结果不正确时，方							便定位错误的原因细节) 
strerror();<string.h> 接口，可以将返回码用字符串打印出来 可以尝试系统提供的默认转化字符串 可以测试指令 ls 没有的文件 进行测试，和$?进行测试  kill -9 114514 也可
当然，如果想自己定义，也可以自己设计一套退出方案。最好使用系统默认的。

		c.代码没有跑完，程序崩溃了（信号部分 涉及到一点点） 野指针访问 -- Linux是段错误 window经常崩溃了
		程序崩溃的时候，退出码无意义！一般而言退出码对应的renturn语句不一定被执行 此时返回无意义 此时想了解的是为什么会被崩溃。
	

	正确的一个终止：
		main函数内 return语句，就是终止进程的，return 退出码（普通函数里面代表函数结束）
		exit(n);  <stdlib.h> n就是退出码，规则和之前的相同 0就是对的，其余报错。 和return不同的是，在任何地方调用均代表终止进程。C语言  系统调用接口:unistd.h void _Exit(int)  但是它和exit有点区别。如果数据缓冲区存在数据，c语言版的退出会刷新缓冲区，但是系统调用的不会。
（清理函数 冲刷缓冲 关闭流） 
	库函数 vs 系统接口
	库函数  --  语言应用               exit() 实际上这个函数的底层就是调用的_exit()   所以 缓冲区是由谁维护的呢？指的是什么？  （一定不在操作系统内部，所以就是C标准库进行维护的（基础IO在细讲））
	系统接口  -- 操作系统            _exit()


1.子进程退出，父进程不管子进程，子进程就要处于僵尸状态   -- 内存泄漏（这是系统层面，程序上出现内存泄漏会随着进程的退出而释放掉）
2.父进程创建了子进程，是要子进程办事的，那么子进程把任务完成得怎么样？父进程需要关系吗？如何得知？不需要又该如何处理，
	僵尸进程 刀枪不入 kill -9也无能为力

进程等待：父进程通过进程等待得方式，回收子进程资源，获得子进程退出信息
	如何等待和等待是什么：（操作为主）
--

系统调用 <sys/wait.h><sys/types.h>    等待子进程进程死亡(阻塞式的等待)  wait(int* 输出型参数)  -- 基本验证,回收僵尸进程的问题   成功返回子进程pid  否则-1 wait(NULL)  -- 此时就可以将Z状态回收了（往后写多进程，基本就是fork  + wait 胡总二号 waitpid）
检测进程 ：while :; do ps ajx | head -1 && ps ajx | grep myproc | grep -v grep; sleep 1; echo "------------------------------------"; done

<sys/wait.h><sys/types.h>
pid_t waitpid(pid_t pid, int* status, int options)

pid = -1代表任意一个子进程（多进程）与wait等效    pid > 0等待其id与pid相等的子进程   	= 0
	waitpid(pid,NULL, 0 )  等价于 wait()  



status 输出型参数  获得子进程的退出结果
	status 并不是按照整数来整体使用的。进程返回是有三种情况的！按照比特位的方式，将32个比特位进行划分，我们只学低16位	次低八位，表示子进程的退出码：[15 8]（结果对还是不对）[7 0] 0（说明进程是正常跑完的，没发生异常）
	7 core dump标志
	（进程异常退出，或者崩溃，本质是：操作系统干掉了你的进程！！！（发送信号的方式））
	程序异常，不光光只是内部代码有问题，有可能是外部进行干掉了。
	最低7个比特位代表收到信号（1 - 31）

1.父进程通过wait/waitpid可以那道子进程的退出结果（退出码加退出信号）
2、这个里面究竟干了什么？跨进程拿数据  --本质就是读取了子进程的task_struct的结构 内核中是存在保存退出码和退出信号的
僵尸进程：至少保留该进程的PCB信息 task_struct 里面保留了任何进程退出结果的信息。
wait/waitpid有这个权利吗？--系统调用  当然有

wait/waitpid	可以在目前的情况下，让进程退出具有一定的顺序性
	将来可以让父进程进行更多的收尾工作。

也可使用宏来进行接收
也可以使用 WIFEXITED(status)  -- >  
WEXITSTATUS(status) 上述为真，返回退出码



options 默认为0，表示阻塞等待
	-WNOHANG选项，代表父进程非阻塞等待！
		Linux c语言写的 -> 系统调用接口 -> OS自己提供的接口 -> 就是C语言函数 -> 系统提供的一般大写的标记位 WNOHANG，就是宏定义  （魔术数字 -- 定义成宏） #define WNOHANG 1
		wait No HANG（夯住了  -- 卡住不动了）  -- 实际上，就是此进程没有被cpu调度（原因：比如cpu本来就很忙 ）要么在阻塞队列中，要么等待被调用。
	默认0就是夯住。--阻塞等待  	（阻塞等待 -- 一般是在内核中阻塞，等待被唤醒 -- 类似的就是scanf() 和 cin也会存在类似情况 必定封装系统功能调用。）
    非阻塞等待：如果父进程调用waitpid进行等待，子进程没有退出，waitpid这个系统调用立马返回！




所以实际上里面的源码：
	waitpid(child_id, status, flag){
		子进程退出
			设置status, 
			return child_pid;
		没退出
			if(flag == 0)
				挂起父进程：//等待队列中，进程阻塞本质就是阻塞在系统函数内部！后面代码不执行了，当条件满足时，继续从当前处执行  return child_pid;
			else if (flag == 1)
				return 0;  // 不阻塞进程！
			return 0;
		else{
			// 出错了等其他原因
			return -1;
		}	
	}


我   打电话    张三            张三没好，我就不挂电话    --- > 阻塞调用。


我   打电话   张三             好的，我一会儿在给你打,没好，就一直打，知道好了    --- >每一次打电话的过程，非阻塞调用  -- 基于非阻塞调用的轮询检测方案。


PS:
我 用户
打电话 系统调用
张三 操作系统

阻塞vs非阻塞：未来内容 -- 网络代码大多IO类，不断面临阻塞和非阻塞的接口！


	int quit = 0;
	while(!quit)
	{
		int status = 0;
		pid_t res = waitpid(-1, &status, WNOHANG);  // -1任意子进程
		if (res > 0)  // 等待成功&&子进程退出
		{
			printf: 退出码 WEXITSTATUS(status);
		}
		else if (res == 0)  // 等待成功 && 子进程并未退出
		{
			printf("子进程还未退出");
		}
		else // -1
		{
			// 等待失败   -- 比如张三直接把电话挂了  或者pid错了 
		}
	}



C++的源文件有 ： .cpp .cc .cxx
typedef void (*handler_t) ();  // 函数指针

std::vector<handler_t> handlers;

void fun_one()
{
	临时任务1
}

void fun_two()
{
	临时任务2
}

void Load()
{
	handlers.push_back(fun_one);	
	handlers.push_back(fun_two)
}

...在上面while循环里面执行res = 0；

// 所以以后想要父进程闲的时候执行什么代码，向Load()的里注册即可。




进程程序替换：
是什么？概念 + 原理
fork()之后，父子各自执行父进程代码的一部分。	父子代码共享，数据写时拷贝各一份。
	如果子进程就想执行一个全新的代码呢？
		--利用程序替换完成这个功能。
就是通过特定的接口，加载磁盘上一个权限的程序(代码和数据),加载到调用的进程的地址空间中！


原理：
cpu      task_struct         地址空间        页表          物理内存          磁盘


                                                           映射                                代码and数据

将新的磁盘上的程序加载到内存，并且和当前进程的页表，重新建立映射，摒弃老的程序
exec函数 --调用其他的程序。

进程替换，没有创建新的子进程。--只是重新建立了映射关系，内核没有变化。
理解所谓的程序放入内存中：-> 加载！->所谓的exec函数本质，就是如何加载程序的函数。





怎么办？操作

基本演示 1.不创建子进程  2.创建子进程   [只使用最简单的exec函数]
unistd.h   6个 -- 7

int  execl (const char *path,    const char *arg, ...)  -- >可以传入多个不定参数 传入的命令行是什么，不定参数就如何去填。  最后一						个参数必须是NULL。
	路径加目标文件名	可变参数列表（C深度解剖）

即


*execl("/user/bin.ls", "ls", "-l",  NULL); // 全部替换为对应程序   -- > l list -理解为后面参数一个一个的往后跟
--程序替换，调用成功后，将当前进程的所有代码和数据都进行替换，包括执行的和没有执行的！所以一旦调用成功，后面代码就不会被执行。

如果函数替换失败，出错，-1就被返回了。 成功代码已经替换，就无返回值了。
所以一般在后面设置exit(1);  -- 只要失败了，此进程的返回码就是1了。



--- 代码相互调用的原理 就是在此处的原理
也可以替换子进程代码来进行代码数据替换

为什么要创建子进程呢？  为了不影响父进程
	我们想让父进程聚焦在读取数据，解析数据，指派进程执行代码的功能！
		如果不创建，那么我们替换的进程只能是父进程。创建了，替换的只是子进程，不影响父进程。

加载新程序之前，父子的数据和代码的关系：代码共享、数据写时拷贝
当子进程加载新程序的时候，就是一种写入。代码会写时拷贝。-->将父子的代码分离   -- > 父子进程在代码和数据上就彻底分开了。



详细展开其他函数用法：

int execv(const char* path, char* const argv[]);  -->v vector   之前的是execl是一个一个传，现在是传入一个指针数组
最后一个参数也是NULL  -- 只有传入方式不同
一个指针数据可以如此初始化
char *const argv[NUM] = {
	"ls";
	"-a";
	"-l";
	NULL
};


int execlp(const char *file,    const char *arg, ...); 	带p ->path	要执行程序，必须找到程序，带路径。
		（会自动在path环境变量中做查找）		不带路径能找到对应程序吗？ 环境变量是可以的，

execlp("ls", "ls", "-l", "-a", NULL);
上面两个ls所代表的意思可不同哦~ 第一个ls表示你要执行谁，后面的可变参数表示你想要如何去执行


int execvp(const char *file, char *const argv[]);  p ->path v ->以数组的形式传入 


int execle(const char *path, const char *arg, ...（最后一个 NULL）, char* const envp[]);  l ->传入可变 无p->带路径找到程序 e 环境变量
（最后一个参数不传也是允许的，）
getenv("环境变量名")；获取对应的环境变量值
那么在另外一个替换程序内，可以传入一个环境变量。
	指针数组里："key=val" -- > key就是环境变量名 ，然后接口就传入指针数据即可。

同样的，环境变量具有全局属性，子进程会继承下去。

int execvpe()

	系统基本封装（满足上层的不同调用场景）
其实上面六个都是经过封装了的，但是下面那个才是系统真正传入的唯一接口：
真正的系统功能调用：
int execve(const char *path, char *const argv[], char* const envp[]); 
......



*
如何执行其他我自己的c/c++语言呢？
如何执行其他语言的程序
	strcmp("", "")字符串比较函数
	
execl("要执行程序的绝对路径", 参数...)（别忘了最后的NULL）
	这里也可以使用相对路径 

如何执行其他语言呢？
比如运行python脚本
execlp("python", "python", "文件名.py", NULL);
	解释器文件 运行参数 ...

如果本身是可执行文件，那么等价于之前写的，比如py : execlp("./.py", ".py", NULL);

exec* ：功能实际上也就是加载器的底层接口！上层语言在咋个变化，底层调用不变！！！


补充makefile知识：.PHONY:all ->伪目标，不需要依赖文件 只有依赖关系
		all: exec mycmd
		exec:...
			gcc ..
		mycmd:...
			gcc...
		...



应用：简单实现一下shell：命令行解释器：：：
简单的shell：
补充底行模式：:%s/目标字符串/替换字符串/g 将目标字符串全部替换成对应字符串
shell运行原理：通过让子进程执行命令，父进程等待&&解析命令。

思路：0、命令行解释器，一定是一个常驻内存的进程，不退出
NUM 1024
SIZE 32
SEP " "
int main()
{
	char *g_argv[SIZE];  // 指针数组  保存打散之后的命令行字符串
	char cmd_line[NUM];  // 获取用户命令缓冲区 ，收取命令行字符串
	while(true)
	{
	1.打印出提示信息：
	// 实际上都可以获取，这里粘贴
	//[xxx@xxx myshell]#
	printf("字符串");  // 提示符
	// 没有\n 立马刷新：
	fflush(stdout);

	2.获取用户的键盘输入  ls -a -l -i
	// 获取的字符串
	memset(cmd_line, '\0', sizeof cmd_line);  // sizeof 可以不用带圆括号
	// char* fgets(char* s, int size, FILE *stream);   字符串 ，
	if (fgets(cmd_line, sizeof cmd_line, stdin) == NULL)  // 出错处理  // 输入了回车\n
	{
		continue;
	}
	// ls -a -l -i\n 
	cmd_line[strlen(cmd_line) - 1] = '\0';  // 把回车置为\0

	3."ls -a -l -i" -> "ls", "-a", "-l", "-i" 命令行字符串解析工作
	// 可以自己设计算法  利用双指针操作即可。
	// 麻烦，这个功能就是把一个字符串打散成多个字符串 -- C语言里面有接口 (string.h) char* strtok(char *str, const char* delim);  // 目标字符串 分隔符
	g_argv[0] = strtok(cmd, SEP); // 第一次调用，要传入原始字符串
	index = 1;
	if (strcmp(g_argv[0], "ls")  == 0)
	{
		g_argv[index++] = "--color=auto"	
	}
	//while (1)
	//{
	//	g_argv[index ] = strtok(NULL, SEP);// 多次调用，还要解析原始字符串，就传入NULL  解析完传入NULL
	//	index++;
	//}
	// 还可以这么写：while(g_argv[index++] = strtok(NULL, SEP)); 赋值，while检查g_argv[index++] 里的值
	//for(index = 0, g_argv[index], index++);  // 检测是否检查成功
	
	4. TODO 内置命令  判断命令，如果是cd命令，就不能创建子进程   让父进程-（bash、shell）执行的命令，就是内置命令、内建立命令。其实也就是shell中的一个内置函数
	if (strcmp(g_argv[0], "cd") == 0)  // 不想子进程去执行，让父进程进行执行
	// int chdir(char* path) 切换当前工作目录
	{
		if(g_argv[1] != NULL) chdir(g_argv[1]);  直接切换即可
	}
	
	
	5.fork()
	pid_t id = fork();
	if (id == 0)  //child
	{
		// 选择替换接口execvp
		// 下面功能是子进程执行
		execvp(g_argv[0], g_argv);
		exit(1);
	}
	// father
	int  status = 0;
	pid_t ret = waitpid(id, &status, 0);  // 阻塞式等待
	if (ret > 0) printf("", WEXITSTATUS(status));
	
	}
}

除开4步骤进行，cd命令什么的，只会影响当前子进程的path 


为什么？总结
一定和应用场景有关。有时候必须让子进程执行新的程序！

fork创建失败：//不断循环进行创建 即可并且子进程不退出（死循环）。--这样会因内存不足报错 --  < 0创建失败
killall 进程名（可执行程序名）会杀掉此进程的所有进程

shell 执行的命令 通常有两种
1.第三方提供的对应的在磁盘中有具体二进制文件的可执行程序（由子进程执行）
2.shell内部，自己实现的方法，由自己（父进程）来执行-- 有些命令会影响shell本身的。（cd export）
	shell代表的是用户

export key=val 环境变量
（补充上述过程）
(放在对子串解析之后 首先if判断一下)putenv(g_argv[1]); 	(环境变量拷贝的是当前的地址，如果continue就会被清空，所以需要注意)
	extern char** environ;  // 获取全局环境变量
环境变量相关的数据 -- 不会被替换（进程替换会替换代码和数据）
shell的环境变量从哪里来的呢？环境变量是写在对应的配置文件中的（shell启动的时候，读取配置文件，获得的起始环境变量 - 了解）

	