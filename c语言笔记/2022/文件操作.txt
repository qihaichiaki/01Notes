1.之前通讯录的信息是放在内存中的，程序退出后，再次运行，又得重新输入，不能长久保存。所以需要文件来保存，能够长久保存，持久化。(文件是存储到硬盘上的)
2.磁盘上的文件都是文件。在程序设计中，一般文件有两种：程序文件、数据文件(从文件功能的角度来说)
程序文件（.cc语言源文件 .obj(windows环境下)目标文件，.exe可执行程序）
数据文件：从某个文件通过程序写入或者拿取数据的文件。
3.文件名：文件路径 文件名主干 文件后缀
4.文件指针：
要操作一个文件，被使用的文件（无论读或者写）就会创建一个文件信息区（结构体对象，FILE类型，在内存里面创建，强关联，用来描述文件基本信息的）
FILE* pf//文件指针变量,通过该指针便就可以操作相关文件。
5.文件的打开和关闭：
fopen fclose//文件打开 文件关闭（如果只写文件主干+后缀则必须在源文件的根目录下，或者是放路径注意\需要使用\\转义字符）
关于文件名：文件中不能包含这些字符：\/:*?"<>| 文件名可以不包含后缀名 文件的后缀名决定了一个文件的默认打开方式
*  FILE* fopen(const char* name, const char* mod);返回文件信息区的地址，第一个是文件名，第二个是打开操作，如果打开失败，返回NULL。传的是字符串首字母地址。
*int fclose( FILE *stream );;文件关闭。如果流被成功关闭，Fclose返回0。int _fcloseall( void )；_fcloseall返回关闭的流的总数。两个函数都返回EOF表示错误。
{
实际上每个文件创建的文件信息区是操作系统的功能。
6.文件操作：
"r"打开，为了只读         
"w"为了只写  如果文件存在，会将内容销毁，然后在写，没有就会在路径下新开辟一个
"a"为了追加   不会将内容摧毁
"rb"二进制只读
"wb"      只写
"wa"      追加

（流：(水流)
外部设备封装个流
电脑上有各种的外部设备（键盘、屏幕、u盘、硬盘、网卡】.......）
把数据写入流，读取数据从流里面读。
比如：文件流（文件指针）标准输入(stdin键盘)、输出(stdout屏幕)、错误流(stderr屏幕)（只要c程序运行起来，这三个流默认打开,类型也是文件指针 FILE*））

下面的输入输出均是针对于程序来说，并且均是顺序读写
//写文件 -所有输出流（在对文件操作w的情况下）
字符操作
int fputc(int c, FILE* ar); c为要写入的字符。(fput(ch, stdout)便可以将字符打印到屏幕上去)返回的是写入的字符的asc，出现错误就返回EOF
文本行操作
int fputs(const char *string, FILE* ar);如果成功，每个函数都会返回一个非负值。当发生错误时，fputs返回EOF
//读文件 -输入流（r）
字符操作
int fgetc(FILE* ar);返回的是读到的字符的asc ，遇到错误或者结束就返回EOF
(fgetc(stdin)键盘里读)
文本行操作
char *fgets( char *string, int n, FILE *stream );读文件所放位置，最大的个数(读多少个字符，最多读255个字符)读的时候实际上读n - 1个。最后一个要给\0  函数返回字符串，如果读完或者没有，返回NULL

fscanf
int fscanf( FILE *stream, const char *format [, argument ]... );格式化输入，所有输入流，后面和scanf一致。针对于r只读
fprintf
int fprintf( FILE *stream, const char *format [, argument ]...);格式化输出，所有输出流，后面和printf一致，针对于w只写

下面只能文件操作
//二进制输出 wb
fwrite size_t fwrite( const void *buffer, size_t size, size_t count, FILE *stream );
                                         指针指向要写的数据 写多大 最多写几个数据   写入哪个流（单位字节）Fwrite返回实际写入的完整项数，如果发生错误，这个数可能小于count。此外，如果发生错误，则无法确定文件位置指示器。
//二进制输入 rb
  fread size_t fread( void *buffer, size_t size, size_t count, FILE *stream );
                                   指针指向要存的数据地址  读多大  最多读几个数据   取出哪个流（单位字节） 返回实际读到的元素 

7.对比函数：scanf 格式化的输入函数
                  printf 格式化的输出函数
                    fscanf - 针对所有输入流的格式化输入函数
                    fprintf - 针对所有输出流的格式化输出函数
//一下建议用结构体来进行证明：（一下数据必须能转，才能实现）
                    sscanf - int sscanf( const char *buffer, const char *format [, argument ] ... );从一个字符串里面读取一个格式化的数据。后面和scanf一致，第一个要提取字符串的地址
                    sprintf - int sprintf( char *buffer, const char *format [, argument] ... );把格式化的数据转化为字符串，后面和printf一致，前面是储存字符串的地址。

实战项目：将内存版的通讯录改造成保存到文件版本的。

8.文件的随机读写：（我要往哪里写）
文件里面一开始有记录读取文件的位置的，默认是起始位置。
fseek 根据文件指针的位置和偏移量来
int fseek( FILE *stream, long offset, int origin );origin：SEEK_CUR -文件当前 SEEK_END 末尾 SEEK_SET 开始  offset：偏移量

实际上每读取一次，当前文件指针就会记录位置，也就是cur 写完或者读完就加一
使用后，现在指针指向当前位置。

ftell long ftell( FILE *stream );
返回当前位置与起始位置的偏移量

让文件回归到起始位置 void rewind(FILE *stream) 文件指针的位置回到起始位置。

9.数据文件：文本文件 二进制文件
数据在内存中存储的就是二进制的，如果直接拿出来存储就是二进制文件，如果要求外存在要求ASCII码值的形式就是文本文件。
字符一律转化为ASCII码值储存，数值数据既可以ASCII码值存储，也可以二进制储存
二进制储存不做任何改变，包括大小端的储存顺序都没变。
二进制显示的话一般都是16进制来展示。

10.文件读取结束的判定：
被错误使用的feof：-》应该用于已经知道结束了，是来确定原因的（失败还是末尾）是不是遇到末尾
而应该利用fgetc 或者fgets传回来的EOF ，NULL 或者fread 的返回个数
ferror是不是遇到错误

11.文件缓冲区
自动为程序中使用的文件开辟缓冲区 在内存里面
读取 先将硬盘中数据放入输入缓冲区，放满，在放入程序里面，反之同理。
让效率提高
所以得到结论：想让数据瞬间到文件里面去，刷新数据或者关闭文件即可，如果不关闭，可能造成数据丢失。