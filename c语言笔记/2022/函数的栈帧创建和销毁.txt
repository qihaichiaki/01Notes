注意:不同的编译器底下函数的栈帧是略有差异的，但是基本是一致的。

1.寄存器   集成于CPU上的，完全独立的。（硬盘，内存，寄存器）
eax
ebx
ecx
edx
以下两个寄存器是存放地址的，这两个地址是用来维护函数栈帧的。
ebp  栈底指针
esp   栈顶指针
栈区内存地址的使用习惯先用高地址，后用低地址，而这里的栈底就应该是高地址，栈顶是低地址。可以联系到放东西，你往一个箱子里放东西总是以下面那个为顶来进行放置的。
他们中间的这份空间就是当前调用函数的空间，他们维护的就是这个栈帧。

每一个函数调用，都要在栈区开辟一个空间。
main函数也是被其他函数调用的。

在vc里面看c语言的汇编代码即在调试时右键点击反汇编即可。

栈底栈顶指针先指向开辟调用这个函数的函数的栈帧
push ebp指压栈   指将ebp原来的位置移到esp原来位置的上方，而esp也自然指向了ebp的上方。即地址往上走了一步，地址减少（底高，顶低）
mov ebp，esp     是指把esp的值给ebp（里面存的地址）
sub esp，0E4h   是让esp的值减去一个八进制数
这样一来ebp，esp又重新维护了一片空间
在main函数开辟空间时，一开始ebp和esp是指向_tmainCRTStartup这个函数的，经过上面 操作后，成功的为main函数开辟了一条空间。
push是顶上压，然而每一次压esp就会向顶前进一步 这一步一般是4个字节 一个字节对应一个地址
lea load effecitve address 加载有效的地址
lea edi，[ebp-0E4h]即就是将后面的那个地址放在edi里。
word数据两个字节，dword就是四个字节
*
lea edi，[ebp-0E4h]
mov ecx,39h 次数（准确的次数）
mov eax,0CCCCCCCCCh
rep stos dword ptr es:[edi]
上面汇编的意思就是把edi地址以下的空间即到（edi-ebp~0E4h~main函数的空间）全部初始化成0CCCCCCCCCh其中0和h未参与其中（四个字节，32个比特，八个十六进制数）