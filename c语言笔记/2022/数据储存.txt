char a =-128
printf ("%u\n",a)

输出很大的数。
一开始，先把-128转化为原码，然后反码，最后加一，随后截断一字节的数据，实际上a里面储存的是10000000      %u打印无符号整数，并且整型提升，提升最高位的数，即111111....10000000。因为无符号，所以编直接将其当做原码，打印出来即可。

*注意整型提升提升的是原来的比如上面的char类型是不是有符号来提升的。是有符号类型的就按储存的原码的符号位提升。没有就加0

int i = -20
00000.....10100
11111.....01011
11111.....01100
unsigned int j = 10;
....
printf ("%d",i + j)
补码相加然后转化为原码即可，按有符号整数来打印

unsigned int i

Sleep休息一下屏幕。里面单位是毫秒。需要引用头文件。Windows.h

limits.h查找整型的取值范围。

%f打印小数点后六位。
浮点数据
存入
*整数和浮点数在内存里面的存储是有差异的。
任意的一个二进制浮点数v可以表示成下面的形式:(-1)^S*M*2^E
M 有效数字 大于等于1，小于2
2^E表示指数位。
9.0
1001.0
-1^0   1.001   2^3
     s    m              e
bit 1    23              8      32位
      1    52           11      64位
         m 计算机里面前面的1可以省去，不用存
e 被认为是一个无符号整数，但是也存在负数，所以每次存的时候，都要加一个修成值，加127或者1023。

存储的时候顺序 s e m从小到大
并且浮点数不存在原码和补码的说法


拿出
e不全为0.不全为1，那么就减127/
其余按规则拿出（怎么放，怎么拿）

e全为0，则e等于1-127/，m不加1了，即不是1.....了，是0.....    很小的数字.。
e为全1，m不用管。
表示正负无穷大的数

浮点数在内存里面如果保存不准确，那么两个浮点数是不能用等号的。
比如0.00001可能会等于0.0，所以要比较的时候就需要减号。