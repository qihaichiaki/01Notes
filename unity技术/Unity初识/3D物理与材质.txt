------3D渲染----------

Material：材质 - 每个物体特定情况下显示的颜色。
-着色器的一个实例。（比如shader就是一个类，改变里面的颜色，实例化类的每个对象-不同）
shader - 主体。


shader
材质定义颜色，实际上是shader进行完成的。
-GPU运行的程序。可编程的。

Texture 纹理
就是一张图片。
-在shader中的一个变量

----材质、着色器、纹理关系：
材质是着色器的实例，纹理是着色器中的一个变量。起源shader！
-修改shader，其下的material会受到影响
-修改material，其他相关的material不会受到影响
--类比于类与对象。


unity中渲染相关组件：
MeshFilter和MeshRenderer  （Mesh-> 网格（建模里面的多个三角形....）、模型的形状）
MeshFilter：处理模型本身的几何信息。
MeshRenderer是用于渲染此模型（通过material）



unity默认材质：
不可修改。

材质属性：
Standard-shader
Rendering Mode （渲染模式）：主要和透明度相关。
Albedo：反射率-颜色
Metalic：金属度（反射光强度）
Smoothness：反射光的多少
Normal Map：法线贴图（增加物体的细节程度）
From Shader：渲染顺序，数字越低越先渲染到屏幕上去。（透明需要后渲染--毕竟透明只是假的。）


Lighting 光照：
没有光的世界是没有灵魂的。
1.Directional 平行光。类似于太阳光。-覆盖无限的。平行光源位置对物体影子没有影响，但是旋转是有影响的。
2.Point点光。灯泡的光。一点均匀的在一定范围内发出光照。强度随着距离减弱（平方反比律）。点光位置存在影响，但是旋转没有影响（球体）
3.Spot聚光灯。从一个点向一个圆锥形的光照，强度随着距离减弱。
4.Area 范围光 -一定面积商的LED灯。类似于教室内的长条灯。-> 唯一一个非实时光照。在一个面积商均匀的发射光线。
------------------------------

------3D物理-------
3D和2D两套独立的系统，互不干扰。
大体理念和2D物理类似，Colider 定义物理体积，Rigidbody定义物理行为。

Colider：
	和2D基本一致。
	MeshCollider（网格空格器） -Mesh长什么样-形状 精度非常高。但是其性能消耗很多。
Rigidbody：
	Mass：质量
	Drag：线性阻力
	IsKinematic：仅受动画与代码控制，不参与直接的物理模拟（2d中更换为Kinematic模式一样）
	Constraints：冻结位置与旋转。
	




