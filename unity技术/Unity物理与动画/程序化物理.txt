碰撞检测算法（除开引擎的支持）。1.实现小模块的时候。2.给予重要的数学思想（几何处理方面）。
基本的碰撞检测算法负责处理基本的几何体之间的重叠判断的。（三角形、球等）

-判断线端与三角形是否碰撞
2D：
-简单算法：ab为线段，v0v1v2为三角形的三个顶点。x假设为中间线段与三角形之间的交点。
那么将v0v1v2三点和x相连，组成的三个三角形面积等于v0v1v2三角形面积说明x存在三角形的平面上，说明线段ab穿过三角形。
计算三角形面积的算法：
Vector2 a、b、c
return Math.Abs((a.X * (b.Y - c.Y) + b.X * (c.Y - a.Y) + c.X * (a.Y - b.Y)) / 2.0f);  // 求三角形面积。

3D：重心实现。。

三角形与三角形相交

---但是上面算法实际运用起来太耗性能了，我们需要优化方案：

-包围体积层级BVH。
-添加优化结构加速此过程，
-实时性1s30帧以上，可互动1s15帧。
考虑小的三角形不如考虑包含它们的比较大的体积。连大体积碰撞没有话小三角就不进行考虑了。
从大到小的层级-包围体积层级BVH
常见的结构有：
	Octree
	K-D Tree
	BSP

有BVH（树结构）后射线检测会变得更高效。-类似于BFS广度优先遍历，优化射线检测的局部性（其他的不用做无用功）
Octree - 八叉树。
	常出现大量的3D数据的处理中。
	3D世界里可以想象成把一个立方体分成八个相等的小立方体进行管理。

k-D二叉树结构。
	每个区域划分两块，依次类推。
	1.每条边坐标轴对齐
	2.分割点对应一个实际的数据点
	3.每个数据点只包含在一个节点里。


---程序化物理生成----
1.实时生成物理形状的需求（不断生长的树）
2.画一条有物理的线。

----Unity组件
LineRenderer线段渲染器--显示各类线形物体。
重要的属性为positions - 是一个Vector3数组，存储了这条线段的所有端点位置。
// 贝塞尔曲线 - 四个控制点-曲线-构成曲线更好的算法方式。

PolygonCollider2D
Unity会自动帮我们生成一个拟合图片形状的碰撞器。
-将以上两个结合起来，组合成一个贴合线段的碰撞器。

// -利用鼠标画一条有物理的线
1.每帧记录鼠标的位置，
2.位置转换为line renderer中的Positions
3.将positions转换为有宽度的PolygonCollider2D。
（宽度可以利用向量->求一个向量的法向量进行计算）

课后练习：
1.向量的叉乘判断点是否在三角形内。
2.判断圆与矩形是否相交的函数。
3.碰撞盒生成项目（补充为无限生成->即不限制点数），但是存在性能隐患。如何优化？（一种方法是降低线段的分辨率）