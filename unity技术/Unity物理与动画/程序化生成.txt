模型的组成：
	顶点、三角形

	顶点：位置（物体空间）、UV纹理坐标、法线、color顶点色。
-如何应用？（在一个三角形里）
	-面内进行一个插值，应用到每一个像素点上。（比如根据位置-比例进行一个计算）

  UV坐标：（y：v x：u）
	2d纹理映射到3D物理上的。比如uv(0, 0)表示图片左下角，uv(1, 1)表示图片右上角。（对应坐标设置像素点，其余线性插值）
	也可以设置唯一的ID作用（一般是这样做的）。

  Normal法线
	顶点的朝向。存在于物体空间的vector3，始终垂直于所在的平面并且指向外侧。一个法线对应一个顶点。
	（有棱角的表面通常存在多条法线。一个顶点应该存在一个面上，所以这里设置两个点-区分开面。）
	-对光照的计算存在重要的作用。


-三角形面（常用）
	三角形数组表示三角形怎么连的。[1, 4, 3]由1，4，3三个顶点组成的三角形。（Unity中三角形面必须是顺时针的，否则就是反面了）



Unity的Mesh类。
	Mesh类涵盖了一个模型网格的所有信息。
	MeshFilter所作的事情将导入的模型文件转换为一个Mesh类。
	
程序化生成网格。（我们也可以自己利用程序进行生成-模拟MeshFilter的作用）
	Mesh：（下列属性方法均在Mesh实例内）
		vertices -模型顶点数组。Vector3[]
		triangles-面 int[]  表示一个面 （面的最小单位为三角形）
		normals 法线数组-和顶点数组一样长 Vector3[]

	
例子-生成一个三角形、矩形、立方体。
	（3）     （4）	（8 - 24（8 * 3））

	-光照的算法：一般两个向量相乘：n*l = |n| * |l| * cosθ 
				    = cosθ（n和l为单位向量）
			n为法向量，l为光反射的向量。通过计算出角度值。角度值-代表了受光的强度
				>0	
				<=0  黑暗


----生成一个简单的地形和一些草。
	地形可以简单的理解是有起伏的平面，平面是一种许多quad拼接一起的结构。
	某种方式给每个顶点一个偏移值。-随机且自然。
		图形学一个重要的方法：柏林噪声Perlin Noise
			噪声生成方法，一系列0-1之间的随机值-用这些噪声值生成一些看起来随机且自然的东西。
		-使用PerlinNoise进行采样2D Perlin Noise（利用UV位置采样噪声值作为垂直偏移量即可）
	
	-一个简单的方法生成贴合模型的法线：RecalculateNormals()函数。（Mesh类）
			（原理：对于每个点，我们得到它附近几个点的位置并且进行做差，经过几次向量叉乘与求平均值得到一个近似的法线值）


	-种草！
		利用几个小三角形构建草的模型。在将它们放置在地形的网格点处。
		（草地的第一步而已）
		（一个正确的草地应该还存在：1.草的密度和自然形态、2.草被风吹动的动画、3.草与角色的互动.....）
	-实际应用中这种不是最有效的，我们使用几何着色器更高效的渲染草地。


-练习：
	1.程序化生成一个正四棱锥的函数。计算UV和法线。
	2.利用柏林噪声生成有动画的海面。
	3.改进草的生成算法，允许草在地形的任意位置生成，而不是局限在顶点处。
		
			
	
	
		
		



