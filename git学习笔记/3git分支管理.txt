Git的杀手级功能。

--------理解Git分支
HEAD->master
master内存储的最近一次提交的commit-id。


	commit-id	：1---2---3	---------主线
	提交时间线 master主分支

		HEAD -> master -> commit-id最新的一次 3

	可以在一个时间节点创建分支，随后在后面的时间节点上进行合并
		1--2--3--4
		   |--o--|

--------创建分支、分支操作、合并分支

命令：git branch  查看当前仓库中的所有分支。*master
	Git会默认创建master主分支。

HEAD:可以指向任意分支。HEAD指向的分支就是工作分支。
	也就是此时git操作影响的就是HEAD指向的分支。
	*表示在哪里分支工作。

命令：git branch 分支名
	此时会创建一个新的分支。
	此时会在refs/heads/下回创建一个新的分支。
		并且此时会和当前时间点master指向的git对象一致。


命令：git checkout 分支名
	切换分支为工作分支。
	HEAD中已经替换为分支名，git branch查看也可以查看到分支名旁存在*


如何合并呢？
命令：git merge 分支名
	将目标分支合并到当前的工作分支。
	会打印日志：FAST-WORD 快捷模式。
	合并快，原因就是直接将master改成对应分支的存储git对象。

--------删除分支
命令：git branch -d 分支名
	注意，只能在其他分支删除分支（不可自己删除自己-工作）
	
	因为创建、合并分支是非常快的，所以Git鼓励你使用分支完成某个任务，合并完后删除分支，和master分支上工作效果一样的，但是过程更加安全。

---------合并冲突
	但是merge中很可能出现合并冲突。

	场景如下：对于xxx进行升级
	创建分支，并且修改
	dev1	aaa	commit
	master	ccc	commit
	此时进行合并就会出现问题。
	即merge失败。
		失败后，会在对应文件添加提示信息。
		HEAD是当前分支的代码
		分支名就是合并的另一方代码
	-选择一个舍弃一个就可以修复冲突，然后就可以进行add、commit操作就可以完成这次冲突合并的效果。

命令：git checkout -b 分支名
	此时会创建并且切换到分支名，这样省略了git branch创建分支的命令

	
	marge冲突需要手动解决，并且进行一次提交（add、commit）操作。



命令 git log --graph --abbrev-commit
	图示	长的commit-id进行缩写

此时可以打印一个图示的分支流程


-------------------合并模式
	上述对应的合并情况对应的均有模式。

git merge dev 第一次正常合并成功，不会出现合并冲突的时候，是FAST-foward快捷模式。
新增操作，都可以正常合并成功。
Fast-forward模式的结果：
	ff模式存在的问题：看不出是merge进来的，还是正常提交commit进来的。
	

如果是合并冲突，此时合并需要手动解决冲突并且commit一次，此时就是no-ff模式
	此时可以查看历史提交发现区分。

可以不想使用ff模式进行合并 ：git merge --no-ff -m "" 分支名
	这次合并并且加上了提交。
	建议使用no-ff模式，这样能够详细的记录是合并，还是提交。



-----------------分支策略
遵循的原则：
日常开发环境：开发人员提交的代码，没有经过测试验证	线上环境：APP、网站
不稳定，存在bug					稳定
dev分支						master主分支（基本原则）
	           --经过测试，最终将稳定的代码合并到master->

项目中可以进行多人协作的开发了。



-----------------bug分支
master存在bug，需要对其进行解决。

存在这样的场景：
HEAD-> dev2 开发了部分代码，还没提交

——()——
master 存在bug

在dev2 分支编辑代码，并且此时并没有add和commit。
如果想要 工作区和master进行隔离。

--工作区隔离保存命令
命令：git stash 将工作区的内容进行一个保存。.git存在的区域stash，这样不需要add、commit。前提：必须提前被Git管理的文件。此时工作区临时改的内容保存到了stash，工作区回到了原本的状态，此时切回到master也不会受到影响了。

在当前master起 fix_bug分支.进行修复bug。
然后添加、提交完毕。 - bug修复。

切换到master，将bug分支和master分支进行合并
merge --no-ff -m

现在bug已经修复了，但是dev2还在开发。
将stash恢复到工作区：git stash list 表示当前stash区存储的是什么，然后git stash pop 恢复工作区即可。
但是此时dev2bug并没有被修复，但是不影响master分支bug的修复
dev2正常提交，现在和master进行合并。
	此时可能存在合并冲突，需要去人工解决。此处可能会出现错误。
	这样的话，先在1dev2合并master，在本地分支进行修改，这样是不会影响master主分支的。
	解决冲突好，测试完毕后，再2去向master进行合并即可。-不会产生合并冲突了。

注意解决冲突的化即使前面是no-ff进行合并，还是需要add、和commit的。


------------强制删除分支

产品经理：新增一个功能
				你 ————master——————————
					/_____________新增分支
产品经理：算了，这个功能取消了
				你————master————————
					删除分支


注意，之前的删除 git branch -d 是建立在merge成功下的前提，如果没有，那么git会保护分支。
如果确定想直接删除
		git branch -D 直接强制删除即可




 





	

	
	
			




	