软件的一个产出流程：

开发->测试->发布上线
规划、编码、构建、测试、发布、部署和维护

软件开发 - 软件测试 - 软件运维
（开发团队）（测试团队）（运维团队）


开发和运维存在天生的利益对峙问题。

为例解决缓解  ----DevOps解决了这样的问题。

开发人员 与GIt存在非常重要的练习 - 需要进行管理。

小型的部署环境：
存在环境隔离
用户 -> 线上环境（运维）
开发人员->开发环境（测试、开发）



生产集群：代码的稳定 + 环境的配置
为例环境配置的稳定 - > 预发布集群



Git一般会针对不同的环境设计一些不同的模型
Git Flow模型
master：主分支：生产环境
release 预发布分支：预发布/测试环境
develop 开发分支：开发环境
feature 需求开发分支：本地
hotfix 紧急修复分支：本地


master分支：只读唯一分支。一般由release分支合并得到。
唯一的稳定代码，不允许直接在master上修改代码。
对master推送的commit都需要打标签，方便进行追溯。


develop分支
开发分支，基于master分支创建的只读且唯一的分支，始终保持最新完成以及bug修复的代码。可部署到开发环境对应集群。
建议需求由feature分支合并，不直接对其进行开发。


release分支：预发布分支，基于develop分支创建（这次功能全部完善-最新最全），可以部署到测试或预发布集群。
命令：release/版本_可能发布时间
release如果出了问题，需要回归验证develop分支查看是否存在问题。
临时分支。

feature分支：是以develop分支为基础创建的。
命名以：feature/开头，建议的命名规则：feature/用户名_创建时间_分支功能
完成后合并到develop分支上。
需求发布上线，便将其删除。


hotfix分支：基于master 创建分支进行修复，修复完毕后合并到master和develop分支上。
命名：hotfix/用户_创建时间_修复什么
临时分支。


不适用所有的团队。

DevOps平台实例：
Gitee企业版
腾讯coding
阿里云效

一个项目可能存在多个仓库。
-> 选择开发/ 分支模型
........









